Создание программы, где родитель и процесс ребенок выполняют различные действия

Исходный код программы:
#include <stdio.h>
#include <sys/types.h>
#include <unistd.h>
#include <stdlib.h>
int main() {
        pid_t prid, parprid;
        int a = 0, c;
        prid = getpid();
        printf("До выполнения fork():\n");
        printf("Ид. текущего процесса: %d\n", prid);
        printf("Ид. Родительского процесса: %d\n", parprid);
        printf("Начальное значение переменной: %d\n", a);
        c = fork();
        if(c<0) {
                printf("Ошибка при вызове fork()");
                exit(-1);

        }
        else if (c==0){
                printf("Выполнение дочернего процесса\n");
                a = a+1;
                prid = getpid();
                parprid = getppid();
                printf("После выполнения fork():\n");
                printf("Ид. текущего процесса: %d\n", prid);
                printf("Мд. родительского поцесса: %d\n", parprid);
                printf("Значение переменной: %d", a);
        }
        else {
                printf("%d", c);
                a = a+1000;
                prid = getpid();
                parprid = getppid();
                printf("Посл выполнения fork() для родительского процессф: \n");
                printf("Ид. текущего процесса: %d\nИд. родительского процесса: %d\n", prid, parprid);
                printf("Значение переменной a: %d\n", a);
        }
        return 0;
} 
 
Результат выполнения программы:
До выполнения fork():
Ид. текущего процесса: 13162
Ид. Родительского процесса: 466223720
Начальное значение переменной: 0
13163Посл выполнения fork() для родительского процессф:
Ид. текущего процесса: 13162
Ид. родительского процесса: 12998
Значение переменной a: 1000
Выполнение дочернего процесса
После выполнения fork():
Ид. текущего процесса: 13163
Мд. родительского поцесса: 13162
Значение переменной: 1

Выводы: 
Переменная  а в родительском и лочернем процессе независимы друг от друга, так ка распологаются в разном адресном пространстве
Переменные, где хранятся индентификаторы родительского и дочернего процессов так же независимы друг от друга
Родительский процесс получает в качестве значения, возвращаемого системным вызовом fork() идентификатор своего дочернего процесса
Дочерний процесс получает значение 0, возвращаемое системным вызовом fork()
